<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yingjun.ssm.dao.UserDao">
    <!-- TUser的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_TUser_Map" type="com.yingjun.ssm.entity.User">
        <id column="id" property="id" />
        <result column="password" property="password" />
        <result column="name" property="name" />
        <result column="email" property="email" />
    </resultMap>

    <!-- 数据库中表名为:t_user的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="t_user_Column">
        t_user.id as id
        ,t_user.password as password
        ,t_user.name as name
        ,t_user.email as email
    </sql>

    <!--获得类名为:TUser对应的数据库表的数据总行数 -->
    <select id="getTUserRowCount" resultType="java.lang.Long">
        select count(id) from t_user
    </select>
    <!-- 获得类名为:TUser对应数据库中表的数据集合 -->
    <select id="selectTUser" resultMap="result_TUser_Map">
        select 
        <include refid="t_user_Column" /> 
        from t_user
    </select> 

    <!-- 获得一个TUser对象,以参数TUser对象中不为空的属性作为条件进行查询-->
    <select id="selectTUserByObj" parameterType="com.yingjun.ssm.entity.User" resultMap="result_TUser_Map">
        select 
            <include refid="t_user_Column" /> 
        from t_user
        <where>
            <if test="email != null "> and t_user.email = #{email}</if>
            <if test="name != null "> and t_user.name = #{name}</if>
            <if test="password != null "> and t_user.password = #{password}</if>
            <if test="id != null "> and t_user.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过TUser的id获得对应数据库中表的数据对象-->
    <select id="selectTUserById" parameterType="java.lang.Long" resultMap="result_TUser_Map">
        select 
            <include refid="t_user_Column" /> 
        from t_user
        where t_user.id = #{id}
    </select> 

    <!-- 将TUser插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertTUser" parameterType="com.yingjun.ssm.entity.User">
        insert into t_user(id,password,name,email) 
        values(#{id},#{password},#{name},#{email})
    </insert>

    <!-- 将TUser中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyTUser" parameterType="com.yingjun.ssm.entity.User">
        insert into t_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="password != null">password,</if>
            <if test="name != null">name,</if>
            <if test="email != null">email,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="password != null"> #{password},</if>
            <if test="name != null"> #{name},</if>
            <if test="email != null"> #{email},</if>
        </trim>
    </insert>

    <!-- 将TUser批量插入到对应数据库的表中-->
    <insert id="insertTUserByBatch" parameterType="ArrayList">
        insert into t_user(id,password,name,email) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.password},#{item.name},#{item.email})
        </foreach>
    </insert>

    <!-- 通过TUser的id将数据库表中对应的数据删除-->
    <delete id="deleteTUserById" parameterType="java.lang.Long">
        delete from t_user
        where id = #{id}
    </delete>

    <!-- 通过TUser的id将TUser的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateTUserById" parameterType="com.yingjun.ssm.entity.User">
        update t_user set
            password=#{password}
            ,name=#{name}
            ,email=#{email}
        where id=#{id}
    </update>

    <!-- 通过TUser的id将TUser中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyTUserById" parameterType="com.yingjun.ssm.entity.User">
        update t_user
        <set>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="email != null">
                email=#{email},
            </if>
        </set>
        where id=#{id}
    </update>

    <!--校验用户登录-->
    <select id="checkUserLogin" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        <where>
            <if test="email != null "> and t_user.name = #{email}</if>
            <if test="password != null "> and t_user.password = #{password}</if>
        </where>
    </select>

    <!--查询用户是否已经注册-->
    <select id="queryUserByEmail" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        where
            t_user.name = #{email}
    </select>

    <!-- 获得一个TUser对象,以参数TUser对象中不为空的属性作为条件进行查询-->
    <select id="selectUsersByCondition" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        <where>
            <if test="email != null and email!=''"> and t_user.email = #{email}</if>
            <if test="name != null and name!=''"> and t_user.name = #{name}</if>
        </where>
        limit #{start},#{end}
    </select>
    <!-- 不加limit查询符合条件的总记录数-->
    <select id="selectUsersByConditionNoLimit" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        <where>
            <if test="email != null and email!=''"> and t_user.email = #{email}</if>
            <if test="name != null and name!=''"> and t_user.name = #{name}</if>
        </where>
    </select>

    <!--通过邮箱查询用户信息-->
    <select id="queryUserByEmails" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        where
        t_user.email = #{email}
    </select>

    <!--通过用户名称查询用户信息-->
    <select id="queryUserByUserName" parameterType="com.yingjun.ssm.entity.User" resultType="com.yingjun.ssm.entity.User">
        select
        <include refid="t_user_Column" />
        from t_user
        where
        t_user.name = #{name}
    </select>

    <!-- 更新密码通过用户名称即email-->
    <update id="updatePasswordByName">
        update t_user set
        password=#{password}
        where name = #{name}
    </update>
    <!--通过用户名称查询用户信息-->
    <select id="queryUserByUserName" resultType="java.lang.Integer">
        select
        <include refid="t_user_Column" />
        from t_user
        where
        t_user.name = #{name}
        and
        t_user.password = #{password}
    </select>
</mapper>